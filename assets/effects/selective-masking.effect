// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = vec2(a_uv0.x, 1.0 - a_uv0.y);
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;

  #include <alpha-test>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  uniform sampler2D targettexture;
  uniform sampler2D othertexture;
  #endif

  uniform AREA {
    vec4 area;
  };

  void main () {

    vec4 o = vec4(1.0, 1.0, 1.0, 1.0);

    vec4 origin = texture2D(texture, v_uv0);
    vec4 target = texture2D(targettexture, v_uv0);
    vec4 other = texture2D(othertexture, v_uv0);

    bool same = all(equal(origin, target));
    bool inarea = area.x <= v_uv0.x && v_uv0.x <= area.y && area.z <= v_uv0.y && v_uv0.y <= area.w;
    if (same && inarea) {
      o = target;
    } else {
      o = other;
    }

    o *= v_color;

    ALPHA_TEST(o);

    gl_FragColor = o;
  }
}%
